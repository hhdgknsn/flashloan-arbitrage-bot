/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  SwapTest,
  SwapTestInterface,
} from "../../../contracts/swapTest.sol/SwapTest";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "amountOut",
        type: "uint256",
      },
    ],
    name: "SwapExecuted",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "routerAddr",
        type: "address",
      },
      {
        internalType: "address",
        name: "fromToken",
        type: "address",
      },
      {
        internalType: "address",
        name: "toToken",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "swap",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610adc806100606000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063a9678a1814610030575b600080fd5b61004a600480360381019061004591906104b2565b61004c565b005b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146100da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100d190610576565b60405180910390fd5b60008390508073ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b815260040161011c939291906105b4565b6020604051808303816000875af115801561013b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061015f9190610623565b508073ffffffffffffffffffffffffffffffffffffffff1663095ea7b386846040518363ffffffff1660e01b815260040161019b929190610650565b6020604051808303816000875af11580156101ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101de9190610623565b61021d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610214906106c5565b60405180910390fd5b6000600267ffffffffffffffff81111561023a576102396106e5565b5b6040519080825280602002602001820160405280156102685781602001602082028036833780820191505090505b50905084816000815181106102805761027f610714565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505083816001815181106102cf576102ce610714565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050600086905060008173ffffffffffffffffffffffffffffffffffffffff166338ed17398660008630426040518663ffffffff1660e01b8152600401610352959493929190610846565b6000604051808303816000875af1158015610371573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061039a91906109df565b9050600081600183516103ad9190610a57565b815181106103be576103bd610714565b5b602002602001015190507f8d92c805c252261fcfff21ee60740eb8a38922469a7e6ee396976d57c22fc1c9816040516103f79190610a8b565b60405180910390a1505050505050505050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006104498261041e565b9050919050565b6104598161043e565b811461046457600080fd5b50565b60008135905061047681610450565b92915050565b6000819050919050565b61048f8161047c565b811461049a57600080fd5b50565b6000813590506104ac81610486565b92915050565b600080600080608085870312156104cc576104cb610414565b5b60006104da87828801610467565b94505060206104eb87828801610467565b93505060406104fc87828801610467565b925050606061050d8782880161049d565b91505092959194509250565b600082825260208201905092915050565b7f43616c6c6572206973206e6f74206f776e657200000000000000000000000000600082015250565b6000610560601383610519565b915061056b8261052a565b602082019050919050565b6000602082019050818103600083015261058f81610553565b9050919050565b61059f8161043e565b82525050565b6105ae8161047c565b82525050565b60006060820190506105c96000830186610596565b6105d66020830185610596565b6105e360408301846105a5565b949350505050565b60008115159050919050565b610600816105eb565b811461060b57600080fd5b50565b60008151905061061d816105f7565b92915050565b60006020828403121561063957610638610414565b5b60006106478482850161060e565b91505092915050565b60006040820190506106656000830185610596565b61067260208301846105a5565b9392505050565b7f546f6b656e207472616e73666572206e6f7420617070726f7665642e00000000600082015250565b60006106af601c83610519565b91506106ba82610679565b602082019050919050565b600060208201905081810360008301526106de816106a2565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000819050919050565b6000819050919050565b600061077261076d61076884610743565b61074d565b61047c565b9050919050565b61078281610757565b82525050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6107bd8161043e565b82525050565b60006107cf83836107b4565b60208301905092915050565b6000602082019050919050565b60006107f382610788565b6107fd8185610793565b9350610808836107a4565b8060005b8381101561083957815161082088826107c3565b975061082b836107db565b92505060018101905061080c565b5085935050505092915050565b600060a08201905061085b60008301886105a5565b6108686020830187610779565b818103604083015261087a81866107e8565b90506108896060830185610596565b61089660808301846105a5565b9695505050505050565b600080fd5b6000601f19601f8301169050919050565b6108bf826108a5565b810181811067ffffffffffffffff821117156108de576108dd6106e5565b5b80604052505050565b60006108f161040a565b90506108fd82826108b6565b919050565b600067ffffffffffffffff82111561091d5761091c6106e5565b5b602082029050602081019050919050565b600080fd5b60008151905061094281610486565b92915050565b600061095b61095684610902565b6108e7565b9050808382526020820190506020840283018581111561097e5761097d61092e565b5b835b818110156109a757806109938882610933565b845260208401935050602081019050610980565b5050509392505050565b600082601f8301126109c6576109c56108a0565b5b81516109d6848260208601610948565b91505092915050565b6000602082840312156109f5576109f4610414565b5b600082015167ffffffffffffffff811115610a1357610a12610419565b5b610a1f848285016109b1565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610a628261047c565b9150610a6d8361047c565b9250828203905081811115610a8557610a84610a28565b5b92915050565b6000602082019050610aa060008301846105a5565b9291505056fea2646970667358221220b7be35464f2a4888e6dbf3235eee7ef6df71eb45fb7223967fb9fad99b98147064736f6c63430008130033";

type SwapTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SwapTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SwapTest__factory extends ContractFactory {
  constructor(...args: SwapTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      SwapTest & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): SwapTest__factory {
    return super.connect(runner) as SwapTest__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SwapTestInterface {
    return new Interface(_abi) as SwapTestInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): SwapTest {
    return new Contract(address, _abi, runner) as unknown as SwapTest;
  }
}
